[gd_resource type="VisualShader" load_steps=9 format=2]

[ext_resource path="res://intensitycolours.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.25, 1, 0 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0, 0 ) ]

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform float Intensity;
uniform sampler2D tex_frg_2;
uniform sampler2D Texture;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:4
	float n_out4p0 = Intensity;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, vec3(n_out4p0).xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// VectorOp:6
	vec3 n_in6p1 = vec3(0.25000, 1.00000, 0.00000);
	vec3 n_out6p0 = n_out5p0 / n_in6p1;

// VectorOp:8
	vec3 n_in8p1 = vec3(0.50000, 0.00000, 0.00000);
	vec3 n_out8p0 = n_out6p0 + n_in8p1;

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(Texture, n_out8p0.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// VectorOp:7
	vec3 n_out7p0 = n_out2p0 * n_out3p0;

// Output:0
	ALBEDO = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -348.639, 78.2603 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 980, 140 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 220, 40 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 480, 420 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -300, 240 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -560, 480 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -220, 460 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 560, 160 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 120, 520 )
nodes/fragment/connections = PoolIntArray( 4, 0, 2, 0, 5, 0, 6, 0, 2, 0, 7, 0, 6, 0, 8, 0, 8, 0, 3, 0, 3, 0, 7, 1, 7, 0, 0, 0 )
